# MCP Registry Configuration

# Server configuration
MCP_REGISTRY_SERVER_ADDRESS=:8080
MCP_REGISTRY_VERSION=dev

# Database configuration
# Supported types: postgresql, memory
MCP_REGISTRY_DATABASE_TYPE=postgresql
# Leave blank to use Docker Compose defaults, or provide your own connection string
# Format: postgres://username:password@host:port/database
MCP_REGISTRY_DATABASE_URL=

# Path or URL to import seed data (supports local files and HTTP URLs)
MCP_REGISTRY_SEED_FROM=data/seed.json

# GitHub OAuth configuration
# Create a GitHub OAuth App at: https://github.com/settings/applications/new
# Set "Application name": "MCP Registry Local"
# Set "Homepage URL": http://localhost:8080
# Set "Authorization callback URL": http://localhost:8080/auth/github/callback
# Copy the Client ID and generate a Client Secret below
MCP_REGISTRY_GITHUB_CLIENT_ID=
MCP_REGISTRY_GITHUB_CLIENT_SECRET=

# JWT configuration
# Generate a 32-byte Ed25519 seed (64 hex characters) with: openssl rand -hex 32
# Keep this secret and rotate if exposed
MCP_REGISTRY_JWT_PRIVATE_KEY=

# Anonymous authentication for development/testing only
# When enabled, allows anyone to get tokens for publishing to io.modelcontextprotocol.anonymous/* namespace
# This should be disabled in prod
MCP_REGISTRY_ENABLE_ANONYMOUS_AUTH=false

# Google Cloud Identity OIDC configuration for admin access
# Enable OIDC authentication for @modelcontextprotocol.io admin accounts
MCP_REGISTRY_OIDC_ENABLED=false
# Example for Google Cloud Identity issuer
MCP_REGISTRY_OIDC_ISSUER=https://accounts.google.com
# Create OAuth 2.0 Client at: https://console.cloud.google.com/apis/credentials
# Type: "Web application"
MCP_REGISTRY_OIDC_CLIENT_ID=
# Require @modelcontextprotocol.io Google Workspace domain
MCP_REGISTRY_OIDC_EXTRA_CLAIMS=[{"hd":"modelcontextprotocol.io"}]
# Grant admin permissions to OIDC-authenticated users
MCP_REGISTRY_OIDC_EDIT_PERMISSIONS=*
MCP_REGISTRY_OIDC_PUBLISH_PERMISSIONS=*